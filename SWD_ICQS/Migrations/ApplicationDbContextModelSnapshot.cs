// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWD_ICQS.Repository;

#nullable disable

namespace SWD_ICQS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SWD_ICQS.Entity.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Appointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.BlogImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageBin")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Blogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ConstructImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConstructId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageBin")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConstructId");

                    b.ToTable("ConstructImages");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ConstructProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ConstructProducts");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Constructs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContractorId");

                    b.ToTable("Constructs");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contractors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("SubcriptionId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ImageBin")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("ProductProducts");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.RequestDetails", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Requests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Subscriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Appointments", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contracts", "Contract")
                        .WithOne("Appointment")
                        .HasForeignKey("SWD_ICQS.Entity.Appointments", "ContractId")
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Appointments")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Customers", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Contractor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.BlogImages", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Blogs", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Blogs", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Blogs")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ConstructImages", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Constructs", "Construct")
                        .WithMany("ConstructImages")
                        .HasForeignKey("ConstructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Construct");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ConstructProducts", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Constructs", "Construct")
                        .WithMany("ConstructProducts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Products", "Product")
                        .WithMany("ConstructProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Construct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Constructs", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Categories", "Category")
                        .WithMany("Constructs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Constructs")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contractors", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Accounts", "Account")
                        .WithOne("Contractor")
                        .HasForeignKey("SWD_ICQS.Entity.Contractors", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Subscriptions", "Subscription")
                        .WithMany("Contractors")
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contracts", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Requests", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("SWD_ICQS.Entity.Contracts", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Customers", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Accounts", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("SWD_ICQS.Entity.Customers", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Messages", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Messages")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Customers", "Customer")
                        .WithMany("Messages")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Orders", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Orders")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Subscriptions", "Subscription")
                        .WithOne("Order")
                        .HasForeignKey("SWD_ICQS.Entity.Orders", "SubscriptionId")
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.ProductImages", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Products", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Products", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Products")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.RequestDetails", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Products", "Product")
                        .WithMany("RequestDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Requests", "Request")
                        .WithMany("RequestDetails")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Requests", b =>
                {
                    b.HasOne("SWD_ICQS.Entity.Contractors", "Contractor")
                        .WithMany("Requests")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD_ICQS.Entity.Customers", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Accounts", b =>
                {
                    b.Navigation("Contractor")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Blogs", b =>
                {
                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Categories", b =>
                {
                    b.Navigation("Constructs");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Constructs", b =>
                {
                    b.Navigation("ConstructImages");

                    b.Navigation("ConstructProducts");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contractors", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Constructs");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Contracts", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Customers", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Messages");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Products", b =>
                {
                    b.Navigation("ConstructProducts");

                    b.Navigation("ProductImages");

                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Requests", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("SWD_ICQS.Entity.Subscriptions", b =>
                {
                    b.Navigation("Contractors");

                    b.Navigation("Order")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
